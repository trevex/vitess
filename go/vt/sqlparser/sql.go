// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const REAL = 57500
const DOUBLE = 57501
const FLOAT_TYPE = 57502
const DECIMAL = 57503
const NUMERIC = 57504
const TIME = 57505
const TIMESTAMP = 57506
const DATETIME = 57507
const YEAR = 57508
const CHAR = 57509
const VARCHAR = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const COLLATION = 57539
const DATABASES = 57540
const TABLES = 57541
const VITESS_KEYSPACES = 57542
const VITESS_SHARDS = 57543
const VITESS_TABLETS = 57544
const VSCHEMA_TABLES = 57545
const VITESS_TARGET = 57546
const FULL = 57547
const PROCESSLIST = 57548
const COLUMNS = 57549
const FIELDS = 57550
const NAMES = 57551
const CHARSET = 57552
const GLOBAL = 57553
const SESSION = 57554
const ISOLATION = 57555
const LEVEL = 57556
const READ = 57557
const WRITE = 57558
const ONLY = 57559
const REPEATABLE = 57560
const COMMITTED = 57561
const UNCOMMITTED = 57562
const SERIALIZABLE = 57563
const CURRENT_TIMESTAMP = 57564
const DATABASE = 57565
const CURRENT_DATE = 57566
const CURRENT_TIME = 57567
const LOCALTIME = 57568
const LOCALTIMESTAMP = 57569
const UTC_DATE = 57570
const UTC_TIME = 57571
const UTC_TIMESTAMP = 57572
const REPLACE = 57573
const CONVERT = 57574
const CAST = 57575
const SUBSTR = 57576
const SUBSTRING = 57577
const GROUP_CONCAT = 57578
const SEPARATOR = 57579
const MATCH = 57580
const AGAINST = 57581
const BOOLEAN = 57582
const LANGUAGE = 57583
const WITH = 57584
const QUERY = 57585
const EXPANSION = 57586
const UNUSED = 57587

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 294,
	160, 294,
	-2, 284,
	-1, 262,
	112, 624,
	-2, 620,
	-1, 263,
	112, 625,
	-2, 621,
	-1, 326,
	82, 793,
	-2, 60,
	-1, 327,
	82, 751,
	-2, 61,
	-1, 332,
	82, 731,
	-2, 586,
	-1, 334,
	82, 772,
	-2, 588,
	-1, 587,
	1, 346,
	5, 346,
	12, 346,
	13, 346,
	14, 346,
	15, 346,
	17, 346,
	19, 346,
	30, 346,
	31, 346,
	42, 346,
	43, 346,
	44, 346,
	45, 346,
	46, 346,
	48, 346,
	49, 346,
	52, 346,
	53, 346,
	55, 346,
	56, 346,
	263, 346,
	-2, 364,
	-1, 590,
	53, 43,
	55, 43,
	-2, 45,
	-1, 727,
	112, 627,
	-2, 623,
	-1, 940,
	5, 30,
	-2, 430,
	-1, 965,
	5, 29,
	-2, 560,
	-1, 1207,
	5, 30,
	-2, 561,
	-1, 1257,
	5, 29,
	-2, 563,
	-1, 1330,
	5, 30,
	-2, 564,
}

const yyPrivate = 57344

const yyLast = 11224

var yyAct = [...]int{

	263, 1365, 1355, 1321, 878, 662, 968, 1227, 552, 267,
	1269, 1107, 986, 1141, 969, 1104, 1037, 828, 293, 829,
	806, 804, 906, 57, 838, 1108, 1120, 872, 551, 3,
	825, 1114, 82, 1011, 1081, 932, 204, 331, 762, 204,
	992, 759, 600, 241, 752, 692, 1040, 1028, 793, 232,
	778, 729, 294, 51, 842, 808, 484, 490, 430, 584,
	852, 496, 583, 265, 868, 599, 325, 204, 82, 320,
	786, 914, 204, 504, 204, 322, 82, 250, 56, 1358,
	240, 1342, 1353, 462, 566, 1328, 1350, 895, 879, 1341,
	1099, 1201, 435, 1327, 233, 234, 235, 236, 1280, 858,
	239, 894, 254, 601, 51, 602, 457, 199, 195, 196,
	197, 1135, 246, 1136, 1137, 269, 1296, 517, 516, 526,
	527, 519, 520, 521, 522, 523, 524, 525, 518, 899,
	819, 528, 260, 61, 238, 1149, 1150, 1151, 893, 999,
	237, 475, 998, 1154, 1152, 1000, 820, 821, 476, 473,
	474, 1019, 851, 1230, 1246, 859, 761, 231, 1190, 63,
	64, 65, 66, 67, 1188, 468, 469, 1352, 1349, 1322,
	1082, 1061, 459, 787, 461, 445, 1312, 843, 1373, 987,
	989, 1270, 446, 438, 1369, 192, 193, 193, 890, 887,
	888, 1062, 886, 204, 1272, 204, 671, 1130, 845, 661,
	441, 204, 1278, 1058, 458, 460, 845, 1084, 204, 1060,
	1129, 1128, 82, 82, 82, 82, 433, 82, 207, 194,
	540, 541, 1301, 897, 900, 198, 1210, 82, 1068, 521,
	522, 523, 524, 525, 518, 1012, 948, 528, 926, 701,
	1086, 1158, 1090, 508, 1085, 452, 1083, 518, 826, 528,
	528, 1088, 693, 698, 502, 501, 988, 82, 431, 892,
	1087, 1103, 1271, 908, 463, 463, 463, 463, 492, 463,
	501, 503, 503, 1089, 1091, 493, 1310, 70, 1168, 463,
	1118, 891, 603, 1297, 859, 1101, 503, 480, 481, 456,
	1367, 429, 1159, 1368, 844, 1366, 465, 466, 467, 51,
	470, 1326, 844, 1279, 1277, 1059, 944, 1057, 943, 437,
	479, 502, 501, 71, 537, 1153, 779, 539, 204, 204,
	204, 896, 736, 848, 82, 502, 501, 845, 503, 849,
	82, 665, 482, 694, 898, 945, 734, 735, 733, 1017,
	582, 907, 503, 1315, 779, 550, 955, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 431, 565, 567, 567,
	567, 567, 567, 567, 567, 567, 575, 576, 577, 578,
	498, 588, 1332, 448, 449, 450, 719, 721, 722, 191,
	538, 494, 720, 1237, 1236, 502, 501, 439, 440, 591,
	54, 568, 569, 570, 571, 572, 573, 574, 1032, 597,
	732, 1031, 503, 542, 543, 544, 545, 546, 547, 548,
	549, 517, 516, 526, 527, 519, 520, 521, 522, 523,
	524, 525, 518, 844, 1020, 528, 704, 705, 841, 839,
	204, 840, 1374, 22, 587, 82, 837, 843, 923, 924,
	925, 204, 204, 82, 317, 318, 204, 1334, 753, 204,
	754, 1311, 1001, 204, 1002, 82, 82, 82, 82, 82,
	82, 82, 82, 464, 933, 1253, 1234, 1065, 1029, 82,
	82, 1375, 1275, 1351, 502, 501, 1338, 483, 204, 519,
	520, 521, 522, 523, 524, 525, 518, 463, 292, 528,
	680, 503, 1308, 245, 1012, 463, 82, 1275, 1319, 483,
	204, 1275, 483, 1275, 1302, 1335, 82, 463, 463, 463,
	463, 463, 463, 463, 463, 672, 1275, 1274, 660, 1007,
	80, 463, 463, 24, 678, 881, 669, 1225, 1224, 1285,
	730, 328, 1212, 483, 1209, 483, 706, 755, 681, 682,
	683, 684, 685, 686, 687, 688, 727, 963, 700, 677,
	82, 964, 689, 690, 676, 666, 330, 283, 282, 285,
	286, 287, 288, 664, 436, 659, 284, 289, 454, 771,
	774, 54, 708, 1165, 1164, 780, 1161, 1162, 594, 723,
	725, 204, 447, 766, 1284, 699, 1161, 1160, 1281, 204,
	204, 483, 51, 204, 204, 938, 483, 82, 790, 483,
	764, 483, 502, 501, 756, 757, 1155, 554, 610, 609,
	82, 846, 1105, 1117, 814, 1117, 764, 1205, 783, 503,
	595, 790, 593, 993, 776, 24, 1167, 731, 517, 516,
	526, 527, 519, 520, 521, 522, 523, 524, 525, 518,
	24, 805, 528, 728, 993, 588, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 812, 204, 816, 817, 82, 790, 82, 1256, 833,
	58, 204, 204, 54, 789, 204, 82, 1163, 1071, 950,
	854, 855, 856, 857, 1003, 818, 874, 1117, 54, 947,
	938, 813, 204, 593, 204, 204, 865, 866, 867, 790,
	330, 330, 330, 330, 587, 330, 593, 596, 587, 702,
	938, 670, 767, 768, 247, 330, 54, 463, 775, 463,
	870, 871, 938, 949, 860, 861, 862, 1343, 463, 1197,
	483, 1318, 782, 946, 784, 785, 1241, 1232, 853, 727,
	795, 798, 799, 800, 796, 506, 797, 801, 882, 1217,
	884, 873, 730, 1146, 1121, 1122, 1127, 1006, 869, 904,
	915, 864, 54, 916, 863, 663, 876, 517, 516, 526,
	527, 519, 520, 521, 522, 523, 524, 525, 518, 927,
	1360, 528, 1356, 1148, 1124, 928, 1105, 328, 1033, 674,
	477, 204, 204, 204, 204, 204, 980, 978, 1126, 970,
	714, 981, 979, 204, 977, 982, 204, 799, 800, 976,
	204, 1347, 330, 1340, 204, 965, 251, 252, 605, 1067,
	911, 497, 1346, 921, 920, 485, 707, 1024, 954, 82,
	1203, 608, 455, 1016, 766, 994, 495, 486, 1317, 966,
	967, 1316, 1254, 588, 588, 588, 588, 588, 1004, 731,
	983, 972, 973, 971, 975, 995, 974, 1014, 805, 1008,
	990, 996, 1242, 883, 673, 991, 588, 929, 930, 931,
	922, 803, 248, 249, 497, 919, 1013, 82, 82, 242,
	82, 1290, 243, 918, 763, 765, 58, 1289, 1244, 1023,
	993, 1025, 1026, 1027, 478, 1009, 1010, 1362, 1361, 62,
	781, 691, 499, 1362, 82, 1298, 587, 587, 587, 587,
	587, 1231, 1030, 697, 60, 592, 55, 937, 204, 1,
	1354, 587, 880, 330, 1036, 889, 1320, 82, 1268, 587,
	463, 330, 1140, 952, 1053, 1039, 836, 827, 69, 428,
	68, 1309, 835, 330, 330, 330, 330, 330, 330, 330,
	330, 1064, 834, 1276, 1021, 1022, 463, 330, 330, 1229,
	847, 1035, 1018, 850, 1147, 1075, 1314, 82, 82, 1074,
	1106, 1015, 726, 970, 616, 614, 1100, 1080, 615, 613,
	1093, 618, 617, 1109, 710, 612, 727, 1063, 215, 1092,
	323, 82, 802, 604, 506, 1111, 875, 330, 500, 72,
	1056, 1125, 1055, 885, 82, 471, 82, 82, 472, 1116,
	217, 536, 256, 917, 997, 329, 1132, 1110, 1112, 51,
	703, 1138, 1131, 489, 1288, 1139, 1243, 953, 563, 777,
	268, 718, 1143, 281, 204, 1134, 278, 280, 758, 279,
	709, 962, 82, 1144, 1145, 510, 266, 258, 772, 772,
	586, 579, 1156, 1157, 772, 82, 204, 794, 792, 791,
	328, 1123, 82, 204, 1119, 585, 1077, 1078, 1070, 82,
	1200, 1295, 204, 830, 713, 26, 59, 253, 19, 1094,
	1095, 18, 1097, 1098, 17, 330, 20, 1177, 935, 16,
	1169, 15, 936, 1179, 14, 443, 30, 21, 330, 940,
	941, 942, 13, 1171, 12, 11, 1174, 10, 951, 9,
	8, 1178, 7, 957, 1186, 958, 959, 960, 961, 6,
	5, 4, 1204, 244, 588, 23, 2, 970, 0, 0,
	0, 0, 1214, 0, 0, 0, 0, 985, 0, 82,
	1213, 0, 0, 1183, 1184, 0, 1185, 82, 0, 1187,
	0, 1189, 1199, 330, 0, 330, 0, 0, 1004, 0,
	0, 0, 0, 0, 330, 726, 488, 82, 82, 82,
	0, 0, 0, 0, 0, 0, 1223, 0, 0, 0,
	589, 1219, 1220, 1221, 1239, 0, 0, 587, 1240, 0,
	330, 516, 526, 527, 519, 520, 521, 522, 523, 524,
	525, 518, 202, 1226, 528, 230, 0, 0, 0, 1181,
	82, 82, 0, 82, 0, 0, 201, 0, 82, 463,
	82, 82, 82, 204, 1109, 1263, 82, 1264, 1265, 1266,
	257, 1255, 0, 202, 0, 0, 0, 1257, 202, 1273,
	202, 0, 82, 1267, 0, 0, 0, 321, 0, 1286,
	1238, 0, 432, 0, 434, 487, 491, 1262, 1110, 0,
	1233, 1258, 1235, 0, 1282, 0, 1283, 0, 1299, 0,
	1079, 0, 509, 0, 0, 1109, 82, 0, 772, 1307,
	1306, 0, 0, 0, 1245, 0, 0, 1300, 0, 0,
	0, 0, 830, 1048, 0, 1287, 0, 0, 0, 1324,
	0, 0, 82, 0, 0, 1329, 0, 553, 970, 1110,
	0, 51, 0, 204, 0, 0, 564, 330, 0, 0,
	0, 0, 1046, 82, 0, 1336, 0, 1247, 1248, 0,
	1249, 1250, 1251, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 1345, 1038, 82, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 1359, 0, 202,
	0, 202, 0, 0, 1370, 1034, 330, 202, 330, 0,
	0, 0, 0, 442, 202, 444, 795, 798, 799, 800,
	796, 451, 797, 801, 0, 0, 1121, 1122, 453, 1047,
	1073, 0, 330, 0, 1052, 1049, 1042, 1050, 1045, 0,
	1048, 0, 1043, 1044, 0, 1357, 0, 1180, 0, 0,
	0, 0, 1096, 0, 1182, 330, 1051, 0, 0, 0,
	0, 0, 1054, 0, 0, 1191, 1192, 1193, 0, 1046,
	1196, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 1206, 1207, 1208, 0, 1211, 0, 0,
	0, 0, 772, 0, 0, 1113, 1115, 0, 0, 0,
	0, 0, 0, 0, 1222, 0, 0, 830, 0, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 202, 202, 202, 0, 0, 0,
	1363, 696, 330, 0, 330, 1142, 1047, 0, 581, 0,
	590, 1052, 1049, 1042, 1050, 1045, 0, 0, 0, 1043,
	1044, 0, 0, 0, 716, 717, 0, 0, 0, 0,
	0, 0, 0, 1051, 0, 0, 0, 0, 0, 1041,
	1170, 0, 1073, 1252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1172, 0, 0, 0, 0, 0, 0,
	1175, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 0,
	769, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	1291, 1292, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 1303, 1304, 1305,
	0, 0, 830, 0, 0, 0, 772, 202, 202, 0,
	611, 0, 202, 0, 0, 202, 824, 0, 0, 679,
	0, 667, 668, 0, 0, 0, 321, 330, 1325, 675,
	0, 1038, 830, 1330, 0, 1228, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 330, 330, 330, 695, 0,
	0, 1076, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 679, 0, 0, 0, 0,
	715, 517, 516, 526, 527, 519, 520, 521, 522, 523,
	524, 525, 518, 0, 0, 528, 1371, 1372, 1259, 1260,
	0, 1261, 0, 0, 0, 0, 1228, 0, 1228, 1228,
	1228, 0, 912, 913, 1142, 491, 0, 257, 0, 0,
	0, 0, 257, 257, 0, 0, 773, 773, 257, 0,
	1228, 0, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 257, 257, 257, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 202, 810, 0, 0, 202,
	202, 788, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 815, 0, 0, 939, 0, 0,
	0, 24, 25, 52, 27, 28, 0, 772, 0, 0,
	1331, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 0, 0, 29, 48, 49, 0, 0,
	0, 1339, 526, 527, 519, 520, 521, 522, 523, 524,
	525, 518, 0, 213, 528, 38, 0, 0, 202, 54,
	0, 0, 1228, 0, 0, 0, 0, 202, 202, 0,
	0, 202, 877, 0, 0, 0, 0, 226, 0, 0,
	0, 901, 902, 0, 0, 903, 0, 0, 202, 0,
	909, 910, 0, 0, 0, 0, 0, 0, 679, 0,
	0, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	31, 32, 34, 33, 36, 0, 50, 0, 208, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 216, 212, 0, 0, 37, 44, 45,
	0, 1066, 46, 47, 35, 0, 0, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 40, 0,
	41, 42, 0, 257, 0, 214, 1194, 483, 218, 0,
	0, 225, 0, 0, 0, 0, 773, 202, 202, 202,
	202, 202, 0, 0, 0, 621, 0, 0, 1102, 984,
	0, 0, 202, 0, 0, 0, 810, 209, 0, 0,
	202, 0, 0, 0, 517, 516, 526, 527, 519, 520,
	521, 522, 523, 524, 525, 518, 0, 1198, 528, 0,
	0, 0, 634, 0, 219, 211, 1133, 220, 221, 222,
	224, 223, 229, 0, 0, 0, 0, 0, 228, 227,
	0, 0, 0, 53, 647, 648, 649, 650, 651, 652,
	653, 0, 654, 655, 656, 657, 658, 635, 636, 637,
	638, 619, 620, 0, 0, 622, 0, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 639, 640, 641,
	642, 643, 644, 645, 646, 0, 0, 0, 0, 0,
	0, 517, 516, 526, 527, 519, 520, 521, 522, 523,
	524, 525, 518, 0, 202, 528, 0, 0, 0, 0,
	0, 0, 0, 1195, 257, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 679, 1202, 0, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	773, 1215, 0, 512, 1216, 515, 0, 1218, 0, 0,
	0, 529, 530, 531, 532, 533, 534, 535, 0, 513,
	514, 511, 517, 516, 526, 527, 519, 520, 521, 522,
	523, 524, 525, 518, 0, 0, 528, 517, 516, 526,
	527, 519, 520, 521, 522, 523, 524, 525, 518, 0,
	0, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	202, 103, 0, 0, 0, 0, 0, 119, 0, 121,
	0, 0, 157, 130, 1166, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 934, 0, 0, 0, 0, 202,
	0, 81, 0, 0, 0, 0, 1173, 0, 202, 0,
	96, 0, 0, 1176, 517, 516, 526, 527, 519, 520,
	521, 522, 523, 524, 525, 518, 0, 0, 528, 0,
	0, 0, 0, 0, 0, 0, 0, 517, 516, 526,
	527, 519, 520, 521, 522, 523, 524, 525, 518, 0,
	0, 528, 0, 0, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 205,
	0, 0, 1323, 553, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 0, 0, 0, 99,
	0, 151, 140, 173, 0, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 0, 0, 158, 175, 190, 94, 810,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 517, 516, 526, 527, 519, 520, 521,
	522, 523, 524, 525, 518, 0, 0, 528, 0, 0,
	83, 0, 120, 187, 146, 105, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 416, 407, 1333, 378, 419, 356, 370, 427, 371,
	372, 400, 342, 386, 138, 368, 0, 359, 337, 365,
	338, 357, 380, 103, 383, 355, 409, 389, 418, 119,
	425, 121, 394, 0, 157, 130, 0, 0, 382, 411,
	384, 405, 377, 401, 347, 393, 420, 369, 398, 421,
	0, 0, 0, 81, 0, 831, 832, 0, 0, 0,
	0, 0, 96, 0, 396, 415, 367, 397, 399, 336,
	395, 0, 340, 343, 426, 413, 362, 363, 1005, 0,
	0, 0, 0, 0, 0, 381, 385, 402, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 392,
	0, 0, 0, 344, 341, 0, 0, 379, 0, 0,
	0, 346, 0, 361, 403, 0, 335, 108, 406, 412,
	376, 205, 414, 374, 373, 417, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 410, 358,
	366, 99, 364, 151, 140, 173, 391, 141, 150, 122,
	165, 145, 172, 206, 180, 162, 179, 186, 85, 161,
	171, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 92, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 339, 0, 158, 175, 190,
	94, 354, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 134, 93, 113, 155, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 350, 353, 348, 349, 387,
	388, 422, 423, 424, 404, 345, 0, 351, 352, 0,
	408, 390, 83, 0, 120, 187, 146, 105, 176, 416,
	407, 0, 378, 419, 356, 370, 427, 371, 372, 400,
	342, 386, 138, 368, 0, 359, 337, 365, 338, 357,
	380, 103, 383, 355, 409, 389, 418, 119, 425, 121,
	394, 0, 157, 130, 0, 0, 382, 411, 384, 405,
	377, 401, 347, 393, 420, 369, 398, 421, 0, 0,
	0, 81, 0, 831, 832, 0, 0, 0, 0, 0,
	96, 0, 396, 415, 367, 397, 399, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 402, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 403, 0, 335, 108, 406, 412, 376, 205,
	414, 374, 373, 417, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 410, 358, 366, 99,
	364, 151, 140, 173, 391, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 339, 0, 158, 175, 190, 94, 354,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 350, 353, 348, 349, 387, 388, 422,
	423, 424, 404, 345, 0, 351, 352, 0, 408, 390,
	83, 0, 120, 187, 146, 105, 176, 416, 407, 0,
	378, 419, 356, 370, 427, 371, 372, 400, 342, 386,
	138, 368, 0, 359, 337, 365, 338, 357, 380, 103,
	383, 355, 409, 389, 418, 119, 425, 121, 394, 0,
	157, 130, 0, 0, 382, 411, 384, 405, 377, 401,
	347, 393, 420, 369, 398, 421, 54, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	396, 415, 367, 397, 399, 336, 395, 0, 340, 343,
	426, 413, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 381, 385, 402, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 392, 0, 0, 0, 344,
	341, 0, 0, 379, 0, 0, 0, 346, 0, 361,
	403, 0, 335, 108, 406, 412, 376, 205, 414, 374,
	373, 417, 144, 0, 160, 110, 118, 84, 90, 0,
	109, 136, 149, 153, 410, 358, 366, 99, 364, 151,
	140, 173, 391, 141, 150, 122, 165, 145, 172, 206,
	180, 162, 179, 186, 85, 161, 171, 97, 154, 87,
	169, 159, 128, 114, 115, 86, 0, 148, 102, 106,
	101, 137, 166, 167, 100, 189, 91, 178, 89, 92,
	177, 135, 164, 170, 129, 126, 88, 168, 127, 125,
	117, 104, 111, 142, 124, 143, 112, 132, 131, 133,
	0, 339, 0, 158, 175, 190, 94, 354, 163, 181,
	182, 183, 184, 185, 0, 0, 95, 107, 134, 93,
	113, 155, 116, 123, 147, 188, 139, 152, 98, 174,
	156, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	404, 345, 0, 351, 352, 0, 408, 390, 83, 0,
	120, 187, 146, 105, 176, 416, 407, 0, 378, 419,
	356, 370, 427, 371, 372, 400, 342, 386, 138, 368,
	0, 359, 337, 365, 338, 357, 380, 103, 383, 355,
	409, 389, 418, 119, 425, 121, 394, 0, 157, 130,
	0, 0, 382, 411, 384, 405, 377, 401, 347, 393,
	420, 369, 398, 421, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 396, 415,
	367, 397, 399, 336, 395, 0, 340, 343, 426, 413,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 381,
	385, 402, 375, 0, 0, 0, 0, 0, 0, 1072,
	0, 360, 0, 392, 0, 0, 0, 344, 341, 0,
	0, 379, 0, 0, 0, 346, 0, 361, 403, 0,
	335, 108, 406, 412, 376, 205, 414, 374, 373, 417,
	144, 0, 160, 110, 118, 84, 90, 0, 109, 136,
	149, 153, 410, 358, 366, 99, 364, 151, 140, 173,
	391, 141, 150, 122, 165, 145, 172, 206, 180, 162,
	179, 186, 85, 161, 171, 97, 154, 87, 169, 159,
	128, 114, 115, 86, 0, 148, 102, 106, 101, 137,
	166, 167, 100, 189, 91, 178, 89, 92, 177, 135,
	164, 170, 129, 126, 88, 168, 127, 125, 117, 104,
	111, 142, 124, 143, 112, 132, 131, 133, 0, 339,
	0, 158, 175, 190, 94, 354, 163, 181, 182, 183,
	184, 185, 0, 0, 95, 107, 134, 93, 113, 155,
	116, 123, 147, 188, 139, 152, 98, 174, 156, 350,
	353, 348, 349, 387, 388, 422, 423, 424, 404, 345,
	0, 351, 352, 0, 408, 390, 83, 0, 120, 187,
	146, 105, 176, 416, 407, 0, 378, 419, 356, 370,
	427, 371, 372, 400, 342, 386, 138, 368, 0, 359,
	337, 365, 338, 357, 380, 103, 383, 355, 409, 389,
	418, 119, 425, 121, 394, 0, 157, 130, 0, 0,
	382, 411, 384, 405, 377, 401, 347, 393, 420, 369,
	398, 421, 0, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 396, 415, 367, 397,
	399, 336, 395, 0, 340, 343, 426, 413, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 381, 385, 402,
	375, 0, 0, 0, 0, 0, 0, 724, 0, 360,
	0, 392, 0, 0, 0, 344, 341, 0, 0, 379,
	0, 0, 0, 346, 0, 361, 403, 0, 335, 108,
	406, 412, 376, 205, 414, 374, 373, 417, 144, 0,
	160, 110, 118, 84, 90, 0, 109, 136, 149, 153,
	410, 358, 366, 99, 364, 151, 140, 173, 391, 141,
	150, 122, 165, 145, 172, 206, 180, 162, 179, 186,
	85, 161, 171, 97, 154, 87, 169, 159, 128, 114,
	115, 86, 0, 148, 102, 106, 101, 137, 166, 167,
	100, 189, 91, 178, 89, 92, 177, 135, 164, 170,
	129, 126, 88, 168, 127, 125, 117, 104, 111, 142,
	124, 143, 112, 132, 131, 133, 0, 339, 0, 158,
	175, 190, 94, 354, 163, 181, 182, 183, 184, 185,
	0, 0, 95, 107, 134, 93, 113, 155, 116, 123,
	147, 188, 139, 152, 98, 174, 156, 350, 353, 348,
	349, 387, 388, 422, 423, 424, 404, 345, 0, 351,
	352, 0, 408, 390, 83, 0, 120, 187, 146, 105,
	176, 416, 407, 0, 378, 419, 356, 370, 427, 371,
	372, 400, 342, 386, 138, 368, 0, 359, 337, 365,
	338, 357, 380, 103, 383, 355, 409, 389, 418, 119,
	425, 121, 394, 0, 157, 130, 0, 0, 382, 411,
	384, 405, 377, 401, 347, 393, 420, 369, 398, 421,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 396, 415, 367, 397, 399, 336,
	395, 0, 340, 343, 426, 413, 362, 363, 0, 0,
	0, 0, 0, 0, 0, 381, 385, 402, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 392,
	0, 0, 0, 344, 341, 0, 0, 379, 0, 0,
	0, 346, 0, 361, 403, 0, 335, 108, 406, 412,
	376, 205, 414, 374, 373, 417, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 410, 358,
	366, 99, 364, 151, 140, 173, 391, 141, 150, 122,
	165, 145, 172, 206, 180, 162, 179, 186, 85, 161,
	171, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 92, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 339, 0, 158, 175, 190,
	94, 354, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 134, 93, 113, 155, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 350, 353, 348, 349, 387,
	388, 422, 423, 424, 404, 345, 0, 351, 352, 0,
	408, 390, 83, 0, 120, 187, 146, 105, 176, 416,
	407, 0, 378, 419, 356, 370, 427, 371, 372, 400,
	342, 386, 138, 368, 0, 359, 337, 365, 338, 357,
	380, 103, 383, 355, 409, 389, 418, 119, 425, 121,
	394, 0, 157, 130, 0, 0, 382, 411, 384, 405,
	377, 401, 347, 393, 420, 369, 398, 421, 0, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 396, 415, 367, 397, 399, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 402, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 403, 0, 335, 108, 406, 412, 376, 205,
	414, 374, 373, 417, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 410, 358, 366, 99,
	364, 151, 140, 173, 391, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 339, 0, 158, 175, 190, 94, 354,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 350, 353, 348, 349, 387, 388, 422,
	423, 424, 404, 345, 0, 351, 352, 0, 408, 390,
	83, 0, 120, 187, 146, 105, 176, 416, 407, 0,
	378, 419, 356, 370, 427, 371, 372, 400, 342, 386,
	138, 368, 0, 359, 337, 365, 338, 357, 380, 103,
	383, 355, 409, 389, 418, 119, 425, 121, 394, 0,
	157, 130, 0, 0, 382, 411, 384, 405, 377, 401,
	347, 393, 420, 369, 398, 421, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	396, 415, 367, 397, 399, 336, 395, 0, 340, 343,
	426, 413, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 381, 385, 402, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 392, 0, 0, 0, 344,
	341, 0, 0, 379, 0, 0, 0, 346, 0, 361,
	403, 0, 335, 108, 406, 412, 376, 205, 414, 374,
	373, 417, 144, 0, 160, 110, 118, 84, 90, 0,
	109, 136, 149, 153, 410, 358, 366, 99, 364, 151,
	140, 173, 391, 141, 150, 122, 165, 145, 172, 206,
	180, 162, 179, 186, 85, 161, 171, 97, 154, 87,
	169, 159, 128, 114, 115, 86, 0, 148, 102, 106,
	101, 137, 166, 167, 100, 189, 91, 178, 89, 333,
	177, 135, 164, 170, 129, 126, 88, 168, 127, 125,
	117, 104, 111, 142, 124, 143, 112, 132, 131, 133,
	0, 339, 0, 158, 175, 190, 94, 354, 163, 181,
	182, 183, 184, 185, 0, 0, 95, 107, 334, 332,
	113, 155, 116, 123, 147, 188, 139, 152, 98, 174,
	156, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	404, 345, 0, 351, 352, 0, 408, 390, 83, 0,
	120, 187, 146, 105, 176, 416, 407, 0, 378, 419,
	356, 370, 427, 371, 372, 400, 342, 386, 138, 368,
	0, 359, 337, 365, 338, 357, 380, 103, 383, 355,
	409, 389, 418, 119, 425, 121, 394, 0, 157, 130,
	0, 0, 382, 411, 384, 405, 377, 401, 347, 393,
	420, 369, 398, 421, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 396, 415,
	367, 397, 399, 336, 395, 0, 340, 343, 426, 413,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 381,
	385, 402, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 392, 0, 0, 0, 344, 341, 0,
	0, 379, 0, 0, 0, 346, 0, 361, 403, 0,
	335, 108, 406, 412, 376, 205, 414, 374, 373, 417,
	144, 0, 160, 110, 118, 84, 90, 0, 109, 136,
	149, 153, 410, 358, 366, 99, 364, 151, 140, 173,
	391, 141, 150, 122, 165, 145, 172, 206, 180, 162,
	179, 186, 85, 161, 171, 97, 154, 87, 169, 159,
	128, 114, 115, 86, 0, 148, 102, 106, 101, 137,
	166, 167, 100, 189, 91, 178, 89, 92, 177, 135,
	164, 170, 129, 126, 88, 168, 127, 125, 117, 104,
	111, 142, 124, 143, 112, 132, 131, 133, 0, 339,
	0, 158, 175, 190, 94, 354, 163, 181, 182, 183,
	184, 185, 0, 0, 95, 107, 134, 93, 113, 155,
	116, 123, 147, 188, 139, 152, 98, 174, 156, 350,
	353, 348, 349, 387, 388, 422, 423, 424, 404, 345,
	0, 351, 352, 0, 408, 390, 83, 0, 120, 187,
	146, 105, 176, 416, 407, 0, 378, 419, 356, 370,
	427, 371, 372, 400, 342, 386, 138, 368, 0, 359,
	337, 365, 338, 357, 380, 103, 383, 355, 409, 389,
	418, 119, 425, 121, 394, 0, 157, 130, 0, 0,
	382, 411, 384, 405, 377, 401, 347, 393, 420, 369,
	398, 421, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 396, 415, 367, 397,
	399, 336, 395, 0, 340, 343, 426, 413, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 381, 385, 402,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 360,
	0, 392, 0, 0, 0, 344, 341, 0, 0, 379,
	0, 0, 0, 346, 0, 361, 403, 0, 335, 108,
	406, 412, 376, 205, 414, 374, 373, 417, 144, 0,
	160, 110, 118, 84, 90, 0, 109, 136, 149, 153,
	410, 358, 366, 99, 364, 151, 140, 173, 391, 141,
	150, 122, 165, 145, 172, 206, 180, 162, 179, 186,
	85, 161, 598, 97, 154, 87, 169, 159, 128, 114,
	115, 86, 0, 148, 102, 106, 101, 137, 166, 167,
	100, 189, 91, 178, 89, 333, 177, 135, 164, 170,
	129, 126, 88, 168, 127, 125, 117, 104, 111, 142,
	124, 143, 112, 132, 131, 133, 0, 339, 0, 158,
	175, 190, 94, 354, 163, 181, 182, 183, 184, 185,
	0, 0, 95, 107, 334, 332, 113, 155, 116, 123,
	147, 188, 139, 152, 98, 174, 156, 350, 353, 348,
	349, 387, 388, 422, 423, 424, 404, 345, 0, 351,
	352, 0, 408, 390, 83, 0, 120, 187, 146, 105,
	176, 416, 407, 0, 378, 419, 356, 370, 427, 371,
	372, 400, 342, 386, 138, 368, 0, 359, 337, 365,
	338, 357, 380, 103, 383, 355, 409, 389, 418, 119,
	425, 121, 394, 0, 157, 130, 0, 0, 382, 411,
	384, 405, 377, 401, 347, 393, 420, 369, 398, 421,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 396, 415, 367, 397, 399, 336,
	395, 0, 340, 343, 426, 413, 362, 363, 0, 0,
	0, 0, 0, 0, 0, 381, 385, 402, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 392,
	0, 0, 0, 344, 341, 0, 0, 379, 0, 0,
	0, 346, 0, 361, 403, 0, 335, 108, 406, 412,
	376, 205, 414, 374, 373, 417, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 410, 358,
	366, 99, 364, 151, 140, 173, 391, 141, 150, 122,
	165, 145, 172, 206, 180, 162, 179, 186, 85, 161,
	324, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 333, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 339, 0, 158, 175, 190,
	94, 354, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 334, 332, 327, 326, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 350, 353, 348, 349, 387,
	388, 422, 423, 424, 404, 345, 0, 351, 352, 0,
	408, 390, 83, 0, 120, 187, 146, 105, 176, 138,
	0, 0, 0, 0, 264, 0, 0, 0, 103, 0,
	261, 0, 0, 0, 119, 304, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 295, 296, 0, 0, 0,
	0, 0, 0, 822, 0, 54, 0, 0, 262, 283,
	282, 285, 286, 287, 288, 0, 0, 96, 284, 289,
	290, 291, 823, 0, 0, 259, 276, 0, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 315, 0, 275, 0, 0, 270,
	271, 272, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 313,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	305, 314, 311, 312, 309, 310, 308, 307, 306, 316,
	297, 298, 299, 300, 302, 0, 301, 83, 0, 120,
	187, 146, 105, 176, 138, 0, 0, 760, 0, 264,
	0, 0, 0, 103, 0, 261, 0, 0, 0, 119,
	304, 121, 0, 0, 157, 130, 0, 0, 0, 0,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 262, 283, 282, 285, 286, 287, 288,
	0, 0, 96, 284, 289, 290, 291, 0, 0, 0,
	259, 276, 0, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 255, 0, 0, 0, 315,
	0, 275, 0, 0, 270, 271, 272, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 205, 0, 0, 313, 0, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 0, 0,
	0, 99, 0, 151, 140, 173, 0, 141, 150, 122,
	165, 145, 172, 206, 180, 162, 179, 186, 85, 161,
	171, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 92, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 0, 0, 158, 175, 190,
	94, 0, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 134, 93, 113, 155, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 305, 314, 311, 312, 309,
	310, 308, 307, 306, 316, 297, 298, 299, 300, 302,
	0, 301, 83, 0, 120, 187, 146, 105, 176, 138,
	0, 0, 0, 0, 264, 0, 0, 0, 103, 0,
	261, 0, 0, 0, 119, 304, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 483, 262, 283,
	282, 285, 286, 287, 288, 0, 0, 96, 284, 289,
	290, 291, 0, 0, 0, 259, 276, 0, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 315, 0, 275, 0, 0, 270,
	271, 272, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 313,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	305, 314, 311, 312, 309, 310, 308, 307, 306, 316,
	297, 298, 299, 300, 302, 0, 301, 83, 0, 120,
	187, 146, 105, 176, 138, 0, 0, 0, 0, 264,
	0, 0, 0, 103, 0, 261, 0, 0, 0, 119,
	304, 121, 0, 0, 157, 130, 0, 0, 0, 0,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 262, 283, 282, 285, 286, 287, 288,
	0, 0, 96, 284, 289, 290, 291, 0, 0, 0,
	259, 276, 0, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 255, 0, 0, 0, 315,
	0, 275, 0, 0, 270, 271, 272, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 205, 0, 0, 313, 0, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 0, 0,
	0, 99, 0, 151, 140, 173, 0, 141, 150, 122,
	165, 145, 172, 206, 180, 162, 179, 186, 85, 161,
	171, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 92, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 0, 0, 158, 175, 190,
	94, 0, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 134, 93, 113, 155, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 305, 314, 311, 312, 309,
	310, 308, 307, 306, 316, 297, 298, 299, 300, 302,
	24, 301, 83, 0, 120, 187, 146, 105, 176, 0,
	0, 0, 138, 0, 0, 0, 0, 264, 0, 0,
	0, 103, 0, 261, 0, 0, 0, 119, 304, 121,
	0, 0, 157, 130, 0, 0, 0, 0, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 262, 283, 282, 285, 286, 287, 288, 0, 0,
	96, 284, 289, 290, 291, 0, 0, 0, 259, 276,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 0, 0, 0, 0, 315, 0, 275,
	0, 0, 270, 271, 272, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 205,
	0, 0, 313, 0, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 0, 0, 0, 99,
	0, 151, 140, 173, 0, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 0, 0, 158, 175, 190, 94, 0,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 305, 314, 311, 312, 309, 310, 308,
	307, 306, 316, 297, 298, 299, 300, 302, 0, 301,
	83, 0, 120, 187, 146, 105, 176, 138, 0, 0,
	0, 0, 264, 0, 0, 0, 103, 0, 261, 0,
	0, 0, 119, 304, 121, 0, 0, 157, 130, 0,
	0, 0, 0, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 262, 283, 282, 285,
	286, 287, 288, 0, 0, 96, 284, 289, 290, 291,
	0, 0, 0, 259, 276, 0, 303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 315, 0, 275, 0, 0, 270, 271, 272,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 205, 0, 0, 313, 0, 144,
	0, 160, 110, 118, 84, 90, 0, 109, 136, 149,
	153, 0, 0, 0, 99, 0, 151, 140, 173, 0,
	141, 150, 122, 165, 145, 172, 206, 180, 162, 179,
	186, 85, 161, 171, 97, 154, 87, 169, 159, 128,
	114, 115, 86, 0, 148, 102, 106, 101, 137, 166,
	167, 100, 189, 91, 178, 89, 92, 177, 135, 164,
	170, 129, 126, 88, 168, 127, 125, 117, 104, 111,
	142, 124, 143, 112, 132, 131, 133, 0, 0, 0,
	158, 175, 190, 94, 0, 163, 181, 182, 183, 184,
	185, 0, 0, 95, 107, 134, 93, 113, 155, 116,
	123, 147, 188, 139, 152, 98, 174, 156, 305, 314,
	311, 312, 309, 310, 308, 307, 306, 316, 297, 298,
	299, 300, 302, 138, 301, 83, 0, 120, 187, 146,
	105, 176, 103, 0, 0, 0, 0, 0, 119, 304,
	121, 0, 0, 157, 130, 0, 0, 0, 0, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 262, 283, 282, 285, 286, 287, 288, 0,
	0, 96, 284, 289, 290, 291, 0, 0, 0, 0,
	276, 0, 303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 315, 0,
	275, 0, 0, 270, 271, 272, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	205, 0, 0, 313, 0, 144, 0, 160, 110, 118,
	84, 90, 0, 109, 136, 149, 153, 0, 0, 0,
	99, 0, 151, 140, 173, 1364, 141, 150, 122, 165,
	145, 172, 206, 180, 162, 179, 186, 85, 161, 171,
	97, 154, 87, 169, 159, 128, 114, 115, 86, 0,
	148, 102, 106, 101, 137, 166, 167, 100, 189, 91,
	178, 89, 92, 177, 135, 164, 170, 129, 126, 88,
	168, 127, 125, 117, 104, 111, 142, 124, 143, 112,
	132, 131, 133, 0, 0, 0, 158, 175, 190, 94,
	0, 163, 181, 182, 183, 184, 185, 0, 0, 95,
	107, 134, 93, 113, 155, 116, 123, 147, 188, 139,
	152, 98, 174, 156, 305, 314, 311, 312, 309, 310,
	308, 307, 306, 316, 297, 298, 299, 300, 302, 138,
	301, 83, 0, 120, 187, 146, 105, 176, 103, 0,
	0, 0, 0, 0, 119, 304, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 262, 283,
	282, 285, 286, 287, 288, 0, 0, 96, 284, 289,
	290, 291, 0, 0, 0, 0, 276, 0, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 315, 0, 275, 0, 0, 270,
	271, 272, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 313,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	305, 314, 311, 312, 309, 310, 308, 307, 306, 316,
	297, 298, 299, 300, 302, 0, 301, 83, 0, 120,
	187, 146, 105, 176, 138, 0, 0, 0, 505, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 119,
	0, 121, 0, 0, 157, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 507, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 502, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 205, 0, 0, 0, 0, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 0, 0,
	0, 99, 0, 151, 140, 173, 0, 141, 150, 122,
	165, 145, 172, 206, 180, 162, 179, 186, 85, 161,
	171, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 92, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 0, 0, 158, 175, 190,
	94, 0, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 134, 93, 113, 155, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 83, 103, 120, 187, 146, 105, 176, 119,
	0, 121, 0, 0, 157, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 77, 78,
	0, 73, 0, 0, 0, 79, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 0, 0,
	0, 99, 0, 151, 140, 173, 0, 141, 150, 122,
	165, 145, 172, 75, 180, 162, 179, 186, 85, 161,
	171, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 92, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 0, 0, 158, 175, 190,
	94, 0, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 134, 93, 113, 155, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 809, 0,
	0, 0, 83, 103, 120, 187, 146, 105, 176, 119,
	0, 121, 0, 0, 157, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 811, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 205, 0, 0, 0, 0, 144, 0, 160, 110,
	118, 84, 90, 0, 109, 136, 149, 153, 0, 0,
	0, 99, 0, 151, 140, 173, 0, 141, 150, 122,
	165, 145, 172, 206, 180, 162, 179, 186, 85, 161,
	171, 97, 154, 87, 169, 159, 128, 114, 115, 86,
	0, 148, 102, 106, 101, 137, 166, 167, 100, 189,
	91, 178, 89, 92, 177, 135, 164, 170, 129, 126,
	88, 168, 127, 125, 117, 104, 111, 142, 124, 143,
	112, 132, 131, 133, 0, 0, 0, 158, 175, 190,
	94, 0, 163, 181, 182, 183, 184, 185, 0, 0,
	95, 107, 134, 93, 113, 155, 116, 123, 147, 188,
	139, 152, 98, 174, 156, 0, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 83, 0, 120, 187, 146, 105, 176, 103,
	0, 0, 0, 0, 0, 119, 0, 121, 0, 0,
	157, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 205, 0, 0,
	0, 0, 144, 0, 160, 110, 118, 84, 90, 0,
	109, 136, 149, 153, 0, 0, 0, 99, 0, 151,
	140, 173, 0, 141, 150, 122, 165, 145, 172, 206,
	180, 162, 179, 186, 85, 161, 171, 97, 154, 87,
	169, 159, 128, 114, 115, 86, 0, 148, 102, 106,
	101, 137, 166, 167, 100, 189, 91, 178, 89, 92,
	177, 135, 164, 170, 129, 126, 88, 168, 127, 125,
	117, 104, 111, 142, 124, 143, 112, 132, 131, 133,
	0, 0, 0, 158, 175, 190, 94, 0, 163, 181,
	182, 183, 184, 185, 0, 0, 95, 107, 134, 93,
	113, 155, 116, 123, 147, 188, 139, 152, 98, 174,
	156, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 83, 0,
	120, 187, 146, 105, 176, 103, 0, 0, 0, 0,
	0, 119, 0, 121, 0, 0, 157, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 205, 0, 0, 0, 0, 144, 0,
	160, 110, 118, 84, 90, 0, 109, 136, 149, 153,
	0, 0, 0, 99, 0, 151, 140, 173, 0, 141,
	150, 122, 165, 145, 172, 206, 180, 162, 179, 186,
	85, 161, 171, 97, 154, 87, 169, 159, 128, 114,
	115, 86, 0, 148, 102, 106, 101, 137, 166, 167,
	100, 189, 91, 178, 89, 92, 177, 135, 164, 170,
	129, 126, 88, 168, 127, 125, 117, 104, 111, 142,
	124, 143, 112, 132, 131, 133, 0, 0, 0, 158,
	175, 190, 94, 0, 163, 181, 182, 183, 184, 185,
	0, 0, 95, 107, 134, 93, 113, 155, 116, 123,
	147, 188, 139, 152, 98, 174, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	809, 0, 0, 0, 83, 103, 120, 187, 146, 105,
	176, 119, 0, 121, 0, 0, 157, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 811, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 205, 0, 0, 0, 0, 144, 0,
	160, 110, 118, 84, 90, 0, 109, 136, 149, 153,
	0, 0, 0, 99, 0, 151, 140, 173, 0, 807,
	150, 122, 165, 145, 172, 206, 180, 162, 179, 186,
	85, 161, 171, 97, 154, 87, 169, 159, 128, 114,
	115, 86, 0, 148, 102, 106, 101, 137, 166, 167,
	100, 189, 91, 178, 89, 92, 177, 135, 164, 170,
	129, 126, 88, 168, 127, 125, 117, 104, 111, 142,
	124, 143, 112, 132, 131, 133, 0, 0, 0, 158,
	175, 190, 94, 0, 163, 181, 182, 183, 184, 185,
	0, 0, 95, 107, 134, 93, 113, 155, 116, 123,
	147, 188, 139, 152, 98, 174, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 83, 103, 120, 187, 146, 105,
	176, 119, 0, 121, 0, 0, 157, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 711, 0,
	0, 712, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 205, 0, 0, 0, 0, 144, 0,
	160, 110, 118, 84, 90, 0, 109, 136, 149, 153,
	0, 0, 0, 99, 0, 151, 140, 173, 0, 141,
	150, 122, 165, 145, 172, 206, 180, 162, 179, 186,
	85, 161, 171, 97, 154, 87, 169, 159, 128, 114,
	115, 86, 0, 148, 102, 106, 101, 137, 166, 167,
	100, 189, 91, 178, 89, 92, 177, 135, 164, 170,
	129, 126, 88, 168, 127, 125, 117, 104, 111, 142,
	124, 143, 112, 132, 131, 133, 0, 0, 0, 158,
	175, 190, 94, 0, 163, 181, 182, 183, 184, 185,
	0, 0, 95, 107, 134, 93, 113, 155, 116, 123,
	147, 188, 139, 152, 98, 174, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 83, 0, 120, 187, 146, 105,
	176, 103, 0, 607, 0, 0, 0, 119, 0, 121,
	0, 0, 157, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 606, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 205,
	0, 0, 0, 0, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 0, 0, 0, 99,
	0, 151, 140, 173, 0, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 0, 0, 158, 175, 190, 94, 0,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	83, 103, 120, 187, 146, 105, 176, 119, 0, 121,
	0, 0, 157, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 205,
	0, 0, 0, 0, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 0, 0, 0, 99,
	0, 151, 140, 173, 0, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 0, 0, 158, 175, 190, 94, 0,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	83, 103, 120, 187, 146, 105, 176, 119, 0, 121,
	0, 0, 157, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 811, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 205,
	0, 0, 0, 0, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 0, 0, 0, 99,
	0, 151, 140, 173, 0, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 0, 0, 158, 175, 190, 94, 0,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	83, 103, 120, 187, 146, 105, 176, 119, 0, 121,
	0, 0, 157, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 507, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 205,
	0, 0, 0, 0, 144, 0, 160, 110, 118, 84,
	90, 0, 109, 136, 149, 153, 0, 0, 0, 99,
	0, 151, 140, 173, 0, 141, 150, 122, 165, 145,
	172, 206, 180, 162, 179, 186, 85, 161, 171, 97,
	154, 87, 169, 159, 128, 114, 115, 86, 0, 148,
	102, 106, 101, 137, 166, 167, 100, 189, 91, 178,
	89, 92, 177, 135, 164, 170, 129, 126, 88, 168,
	127, 125, 117, 104, 111, 142, 124, 143, 112, 132,
	131, 133, 0, 0, 0, 158, 175, 190, 94, 0,
	163, 181, 182, 183, 184, 185, 0, 0, 95, 107,
	134, 93, 113, 155, 116, 123, 147, 188, 139, 152,
	98, 174, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	83, 0, 120, 187, 146, 105, 176, 580, 103, 0,
	0, 0, 0, 0, 119, 0, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 0,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	0, 0, 319, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 83, 103, 120,
	187, 146, 105, 176, 119, 0, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 0,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 83, 103, 120,
	187, 146, 105, 176, 119, 0, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 200, 0, 205, 0, 0, 0,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 83, 103, 120,
	187, 146, 105, 176, 119, 0, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 0,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 83, 103, 120,
	187, 146, 105, 176, 119, 0, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 0,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 83, 103, 120,
	187, 146, 105, 176, 119, 0, 121, 0, 0, 157,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 205, 0, 0, 0,
	0, 144, 0, 160, 110, 118, 84, 90, 0, 109,
	136, 149, 153, 0, 0, 0, 99, 0, 151, 140,
	173, 0, 141, 150, 122, 165, 145, 172, 206, 180,
	162, 179, 186, 85, 161, 171, 97, 154, 87, 169,
	159, 128, 114, 115, 86, 0, 148, 102, 106, 101,
	137, 166, 167, 100, 189, 91, 178, 89, 92, 177,
	135, 164, 170, 129, 126, 88, 168, 127, 125, 117,
	104, 111, 142, 124, 143, 112, 132, 131, 133, 0,
	0, 0, 158, 175, 190, 94, 0, 163, 181, 182,
	183, 184, 185, 0, 0, 95, 107, 134, 93, 113,
	155, 116, 123, 147, 188, 139, 152, 98, 174, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 120,
	187, 146, 105, 176,
}
var yyPact = [...]int{

	1775, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 871, 909, -1000, -1000, -1000, -1000, -1000, -1000,
	223, 7486, 60, 96, -15, 10271, 95, 1790, 10731, -1000,
	-7, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -76, -82,
	-1000, 619, -1000, -1000, -1000, -1000, -1000, 862, 866, 708,
	852, 776, -1000, 6046, 59, 59, 10041, 5066, -1000, -1000,
	201, 10731, 92, 10731, -156, 10501, 55, 55, 55, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 77, 10731, -1000, 10731, 54, 525, 54, 54, 54,
	10731, -1000, 133, -1000, -1000, -1000, -1000, 10731, 511, 802,
	49, 3002, 3002, 3002, 3002, 6, 3002, -75, 738, 882,
	-1000, -1000, -1000, -1000, -1000, -1000, 3002, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	443, 806, 6539, 6539, 871, -1000, 619, -1000, -1000, -1000,
	800, -1000, -1000, 305, 891, -1000, 7256, 131, -1000, 6539,
	2059, 662, -1000, -1000, 662, -1000, -1000, 107, -1000, -1000,
	7011, 7011, 7011, 7011, 7011, 7011, 7011, 7011, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 662, -1000, 6294, 662, 662, 662, 662, 662,
	662, 662, 662, 6539, 662, 662, 662, 662, 662, 662,
	662, 662, 662, 662, 662, 662, 662, 9811, 9114, 10731,
	567, -1000, 652, 4808, -127, -1000, -1000, -1000, 200, 8884,
	-1000, -1000, -1000, 801, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 553, 10731,
	-1000, 1857, -1000, 508, 3002, 74, 712, 506, 257, 498,
	10731, 10731, 3002, 656, 70, 10731, 841, 737, 10731, 497,
	492, -1000, 4550, -1000, 3002, 3002, 3002, 3002, 3002, 3002,
	3002, 3002, -1000, -1000, -1000, -1000, -1000, -1000, 3002, 3002,
	-1000, 890, 241, -1000, -1000, -1000, -1000, 10731, 6539, -1000,
	-1000, -1000, -1000, -1000, -1000, 904, 161, 530, 127, 654,
	-1000, 402, 862, 443, 776, 8648, 757, -1000, -1000, 10731,
	-1000, 6539, 6539, 308, -1000, 9574, -1000, -1000, 3518, 183,
	7011, 336, 246, 7011, 7011, 7011, 7011, 7011, 7011, 7011,
	7011, 7011, 7011, 7011, 7011, 7011, 7011, 7011, 391, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 480, -1000, 619,
	499, 499, 142, 142, 142, 142, 142, 142, 142, 2174,
	5556, 443, 545, 239, 6294, 6046, 6046, 6539, 6539, 10961,
	10961, 6046, 853, 238, 239, 10961, -1000, 443, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6046, 6046, 6046, 6046, 22,
	10731, -1000, 644, 698, -1000, -1000, -1000, 849, 8188, 8418,
	22, 638, 9114, 10731, -1000, -1000, 4292, 652, -127, 630,
	-1000, -101, -87, 5311, 141, -1000, -1000, -1000, -1000, 2744,
	299, 555, 255, -60, -1000, -1000, -1000, 684, -1000, 684,
	684, 684, 684, -32, -32, -32, -32, -1000, -1000, -1000,
	-1000, -1000, 710, 707, -1000, 684, 684, 684, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 704, 704, 704, 697, 697, 713,
	-1000, 10731, -171, 468, 3002, 840, 3002, -1000, 72, -1000,
	10731, 10731, 651, -1000, 10731, 3002, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10731, 251, 10731, 10731, -1000, 239, -1000, 782, 6539,
	6539, 4034, 6539, -1000, -1000, -1000, 806, -1000, 853, 864,
	-1000, 790, 789, 6046, -1000, -1000, 183, 197, -1000, -1000,
	370, -1000, -1000, -1000, -1000, 126, 662, -1000, 2320, -1000,
	-1000, -1000, -1000, 336, 7011, 7011, 7011, 318, 2320, 2151,
	1717, 1097, 142, 130, 130, 143, 143, 143, 143, 143,
	382, 382, -1000, -1000, -1000, 443, -1000, -1000, -1000, 443,
	6046, 635, -1000, -1000, 6539, -1000, 443, 540, 540, 253,
	313, 678, -1000, 124, 668, 540, 6046, 266, -1000, 6539,
	443, -1000, 540, 443, 540, 540, 517, 662, -1000, 10961,
	9114, 9114, 9114, 9114, 9114, -1000, 767, 762, -1000, 755,
	754, 763, 10731, -1000, 543, 8188, 129, 662, -1000, 9344,
	-1000, -1000, 878, 9114, 611, -1000, -1000, 630, -127, -93,
	-1000, -1000, -1000, -1000, 239, -1000, 395, 629, 2486, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 703, 462, -1000, 831,
	170, 178, 437, 829, -1000, -1000, -1000, 804, -1000, 271,
	-62, -1000, -1000, 364, -32, -32, -1000, -1000, 141, 797,
	141, 141, 141, 409, 409, -1000, -1000, -1000, -1000, 341,
	-1000, -1000, -1000, 338, -1000, 736, 10501, 3002, -1000, 3776,
	-1000, -1000, -1000, -1000, -1000, -1000, 1372, 1265, 181, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20, 65, -1000, 3002, -1000, 241, -1000, 408, 6539, -1000,
	-1000, 780, 239, 239, 116, -1000, -1000, 10731, -1000, -1000,
	-1000, -1000, 667, -1000, -1000, -1000, 3260, 6046, -1000, 318,
	2320, 1588, -1000, 7011, 7011, -1000, -1000, 540, 6046, 239,
	-1000, -1000, -1000, 62, 391, 62, 7011, 7011, 4034, 7011,
	7011, -166, 655, 204, -1000, 6539, 182, -1000, -1000, -1000,
	-1000, -1000, 734, 10961, 662, -1000, 7952, 10501, 632, -1000,
	198, 698, 702, 732, 1334, -1000, -1000, -1000, -1000, 756,
	-1000, 714, -1000, -1000, -1000, -1000, -1000, 87, 86, 73,
	10501, -1000, 871, 6539, 611, -1000, -1000, -1000, -121, -123,
	-1000, -1000, -1000, 2744, -1000, 2744, 10501, 39, -1000, 437,
	437, -1000, -1000, -1000, 699, 731, 76, -1000, -1000, -1000,
	550, 141, 141, -1000, 184, -1000, -1000, -1000, 531, -1000,
	521, 622, 518, 10731, -1000, -1000, 571, -1000, 196, -1000,
	-1000, 10501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10501, 10731, -1000, -1000, -1000, -1000,
	-1000, 10501, 10731, -1000, 251, -1000, 239, -1000, 3776, -1000,
	878, 9114, -1000, -1000, 443, -1000, 7011, 2320, 2320, -1000,
	-1000, 443, 684, 684, -1000, 684, 697, -1000, 684, -8,
	684, -14, 443, 443, 1891, 2074, -1000, 674, 1978, 662,
	-163, -1000, 239, 6539, -1000, 803, 560, 562, -1000, -1000,
	5801, 443, 479, 114, 477, -1000, 871, 10961, 6539, -1000,
	-1000, 6539, 695, -1000, 6539, -1000, -1000, -1000, 662, 662,
	662, 477, 862, 239, -1000, -1000, -1000, -1000, 2486, -1000,
	472, -1000, 684, -1000, -1000, -1000, 10501, -56, 902, -1000,
	-1000, -1000, -1000, 683, -1000, -1000, -1000, -1000, -1000, -1000,
	-32, 407, -32, 324, -1000, 323, 3002, 3776, 2744, -1000,
	682, -1000, -1000, -1000, -1000, 836, -1000, -1000, 875, 566,
	-1000, 2320, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7011, 7011, -1000, 7011, 7011, 7011,
	443, 406, 239, 814, -1000, 662, -1000, -1000, 634, 10501,
	10501, -1000, 10501, 862, -1000, 239, 239, 10501, 239, 10501,
	10501, 10501, 7716, -1000, 128, 10501, -1000, 461, -1000, 174,
	-1000, -141, 532, 141, -1000, 141, 528, 473, -1000, -1000,
	-1000, 10501, 662, 873, 865, -1000, -1000, 535, 535, 535,
	535, 24, -1000, -1000, 896, -1000, 662, -1000, 619, 110,
	-1000, -1000, -1000, 448, 446, 446, 446, 129, 128, -1000,
	435, 194, 392, -1000, 36, 10501, 277, 813, -1000, 810,
	677, -1000, -1000, -1000, -1000, -1000, 442, 18, -1000, 6539,
	6539, -1000, -1000, -1000, -1000, 443, 44, -175, 10961, 562,
	443, 10501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 312,
	-1000, -1000, 10731, -1000, -1000, 388, -1000, -1000, 449, 712,
	421, -1000, 10501, 239, 561, -1000, 774, -169, -180, 558,
	-1000, -1000, -1000, 673, -1000, -1000, -171, -1000, 18, 788,
	-1000, 772, -1000, 10501, -1000, -1000, 15, -173, 417, 13,
	-178, 730, 662, -182, 728, -1000, 888, 6775, -1000, -1000,
	894, 154, 154, 535, 443, -1000, -1000, -1000, 43, 403,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1126, 28, 433, 1125, 1123, 1121, 1120, 1119, 1112,
	1110, 1109, 1107, 1105, 1104, 1102, 1097, 1096, 1095, 1094,
	1091, 1089, 1086, 1084, 1081, 1078, 133, 1077, 1076, 1075,
	61, 1074, 77, 1071, 1070, 35, 156, 41, 38, 1012,
	1068, 21, 62, 59, 1065, 26, 1064, 1061, 69, 1059,
	48, 1058, 1057, 1180, 1051, 1050, 12, 40, 1047, 1046,
	1045, 1041, 63, 132, 1040, 1039, 1037, 1036, 1033, 1031,
	51, 8, 11, 18, 25, 1030, 115, 9, 1029, 50,
	1028, 1027, 1026, 1024, 23, 1023, 57, 1020, 43, 56,
	1018, 7, 70, 31, 15, 6, 75, 65, 1015, 14,
	66, 42, 1014, 1013, 379, 1011, 1010, 45, 1008, 1005,
	22, 175, 309, 1003, 1002, 1000, 999, 37, 0, 488,
	463, 73, 998, 996, 993, 1166, 71, 55, 20, 992,
	49, 83, 44, 990, 988, 34, 985, 982, 981, 979,
	978, 975, 974, 60, 971, 966, 964, 99, 30, 963,
	962, 64, 27, 960, 959, 953, 47, 58, 952, 942,
	54, 33, 941, 940, 939, 938, 937, 17, 19, 936,
	13, 932, 10, 928, 24, 926, 3, 925, 16, 924,
	4, 922, 5, 46, 1, 920, 2, 919, 916, 52,
	332, 915, 899, 84,
}
var yyR1 = [...]int{

	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 191, 191, 48, 48, 92, 92, 10, 10, 10,
	10, 97, 97, 101, 101, 101, 102, 102, 102, 102,
	133, 133, 11, 11, 11, 11, 11, 11, 11, 11,
	182, 182, 181, 180, 180, 179, 179, 178, 17, 163,
	165, 165, 164, 164, 164, 164, 157, 136, 136, 136,
	136, 139, 139, 137, 137, 137, 137, 137, 137, 137,
	138, 138, 138, 138, 138, 140, 140, 140, 140, 140,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 142, 142, 142, 142, 142,
	142, 142, 142, 156, 156, 143, 143, 151, 151, 152,
	152, 152, 149, 149, 150, 150, 153, 153, 153, 144,
	144, 144, 144, 144, 144, 144, 144, 146, 146, 146,
	154, 154, 147, 147, 147, 148, 148, 148, 155, 155,
	155, 155, 155, 145, 145, 158, 158, 173, 173, 172,
	172, 172, 162, 162, 169, 169, 169, 169, 169, 160,
	160, 161, 161, 171, 171, 170, 159, 159, 174, 174,
	174, 174, 185, 186, 184, 184, 184, 184, 184, 166,
	166, 166, 167, 167, 167, 168, 168, 168, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 177, 175,
	175, 176, 176, 13, 18, 18, 14, 14, 14, 14,
	14, 15, 15, 19, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 108, 108, 106, 106, 109, 109, 107, 107,
	107, 110, 110, 110, 134, 134, 134, 21, 21, 23,
	23, 24, 25, 22, 22, 22, 22, 22, 22, 22,
	16, 192, 26, 27, 27, 28, 28, 28, 32, 32,
	32, 30, 30, 31, 31, 37, 37, 36, 36, 38,
	38, 38, 38, 122, 122, 122, 121, 121, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 55, 55,
	91, 91, 93, 93, 44, 44, 44, 44, 45, 45,
	46, 46, 47, 47, 129, 129, 128, 128, 128, 127,
	127, 49, 49, 49, 51, 50, 50, 50, 50, 52,
	52, 54, 54, 53, 53, 56, 56, 56, 56, 57,
	57, 39, 39, 39, 39, 39, 39, 39, 105, 105,
	59, 59, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 69, 69, 69, 69, 69, 69, 60, 60,
	60, 60, 60, 60, 60, 35, 35, 70, 70, 70,
	76, 71, 71, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 66, 66, 66, 66, 66, 66, 66,
	66, 193, 193, 68, 68, 68, 68, 33, 33, 33,
	33, 33, 132, 132, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 80, 80, 34,
	34, 78, 78, 79, 81, 81, 77, 77, 77, 62,
	62, 62, 62, 62, 62, 62, 62, 64, 64, 64,
	82, 82, 83, 83, 84, 84, 85, 85, 86, 87,
	87, 87, 88, 88, 88, 88, 89, 89, 89, 61,
	61, 61, 61, 61, 61, 90, 90, 90, 90, 94,
	94, 72, 72, 74, 74, 73, 75, 95, 95, 99,
	96, 96, 100, 100, 100, 100, 98, 98, 98, 124,
	124, 124, 103, 103, 111, 111, 112, 112, 104, 104,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	114, 114, 114, 115, 115, 116, 116, 116, 123, 123,
	119, 119, 120, 120, 125, 125, 126, 126, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 189, 190, 130, 131, 131, 131,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	2, 4, 1, 3, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 2, 4, 2, 0, 3, 5,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 7, 5,
	4, 2, 2, 4, 4, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -189, 8, 248, 54, -188, 263, -84, 15, -28,
	5, -26, -192, -26, -26, -26, -26, -26, -163, -165,
	54, 90, -116, 125, 72, 157, 240, 122, 123, 129,
	-119, 57, -118, 256, 135, 162, 173, 167, 194, 186,
	136, 184, 187, 227, 214, 224, 66, 165, 236, 145,
	182, 178, 176, 27, 199, 261, 177, 225, 121, 138,
	133, 200, 204, 228, 171, 172, 230, 198, 134, 33,
	258, 35, 153, 231, 202, 197, 193, 196, 170, 192,
	39, 206, 205, 207, 226, 189, 139, 179, 18, 234,
	148, 151, 201, 203, 130, 155, 260, 232, 175, 140,
	152, 147, 235, 141, 166, 229, 238, 38, 211, 169,
	132, 163, 159, 216, 190, 154, 180, 181, 195, 168,
	191, 164, 156, 149, 237, 212, 262, 188, 185, 160,
	158, 217, 218, 219, 220, 221, 161, 259, 233, 183,
	213, -104, 125, 127, 123, 123, 124, 125, 240, 122,
	123, -53, -125, 57, -118, 125, 157, 123, 108, 187,
	115, 215, 124, 33, 155, -134, 123, -106, 158, 214,
	217, 218, 219, 221, 220, 161, 57, 229, 228, 222,
	-125, 164, -130, -130, -130, -130, -130, 216, 216, -130,
	-2, -88, 17, 16, -5, -3, -189, 6, 20, 21,
	-32, 40, 41, -27, -38, 99, -39, -125, -58, 74,
	-63, 29, 57, -118, 23, -62, -59, -77, -75, -76,
	108, 109, 110, 97, 98, 105, 75, 111, -67, -65,
	-66, -68, 59, 58, 67, 60, 61, 62, 63, 68,
	69, 70, -119, -73, -189, 44, 45, 249, 250, 251,
	252, 255, 253, 77, 34, 239, 247, 246, 245, 243,
	244, 241, 242, 128, 240, 103, 248, -104, -104, 11,
	-48, -53, -96, -133, 164, -100, 229, 228, -120, -98,
	-119, -117, 227, 187, 226, 120, 73, 22, 24, 209,
	76, 108, 16, 77, 107, 249, 115, 48, 241, 242,
	239, 251, 252, 240, 215, 29, 10, 25, 143, 21,
	101, 117, 80, 81, 146, 23, 144, 70, 19, 51,
	11, 13, 14, 128, 127, 92, 124, 46, 8, 111,
	26, 89, 42, 28, 44, 90, 17, 243, 244, 31,
	255, 150, 103, 49, 36, 74, 68, 71, 52, 72,
	15, 47, 91, 118, 248, 45, 122, 6, 254, 30,
	142, 43, 123, 79, 126, 69, 5, 129, 32, 9,
	50, 53, 245, 246, 247, 34, 78, 12, -164, 90,
	-157, 57, -53, 124, -53, 248, -119, -112, 128, -112,
	-112, 123, -53, -18, -53, -111, 128, 57, -111, -111,
	-111, -53, 112, -53, 57, 30, 240, 57, 155, 123,
	156, 125, -131, -189, -120, -131, -131, -131, 159, 160,
	-131, -109, -108, 224, 225, 216, 223, 52, 12, -131,
	-130, -130, -190, 56, -89, 19, 31, -39, -125, -85,
	-86, -39, -84, -2, -26, 36, -30, 21, 65, 11,
	-122, 73, 72, 89, -121, 22, -119, 59, 112, -39,
	-60, 92, 74, 90, 91, 76, 94, 93, 104, 97,
	98, 99, 100, 101, 102, 103, 95, 96, 107, 82,
	83, 84, 85, 86, 87, 88, -105, -189, -76, -189,
	113, 114, -63, -63, -63, -63, -63, -63, -63, -63,
	-189, -2, -71, -39, -189, -189, -189, -189, -189, -189,
	-189, -189, -189, -80, -39, -189, -193, -189, -193, -193,
	-193, -193, -193, -193, -193, -189, -189, -189, -189, -54,
	26, -53, -41, -42, -43, -44, -55, -76, -189, -53,
	-53, -48, -191, 55, 11, 53, 55, -96, 164, -97,
	-101, 230, 232, 82, -124, -119, 59, 29, 30, 56,
	55, -53, -136, -139, -141, -140, -142, -137, -138, 184,
	185, 108, 188, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 30, 145, 180, 181, 182, 183, 200,
	201, 202, 203, 204, 205, 206, 207, 167, 168, 169,
	170, 171, 172, 173, 175, 176, 177, 178, 179, 57,
	-131, 125, -182, 53, 57, 74, 57, -53, -53, -131,
	55, 126, -48, 23, 52, -53, 57, 57, -126, -125,
	-117, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, 11, -107, 11, 92, -53, -39, 9, 92, 55,
	18, 112, 55, -87, 24, 25, -88, -190, -32, -64,
	-119, 60, 63, -31, 43, -53, -39, -39, -69, 68,
	74, 69, 70, -121, 99, -126, -120, -117, -63, -70,
	-73, -76, 64, 92, 90, 91, 76, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -132, 57, 59, 57, -62, -62, -119, -37,
	21, -36, -38, -190, 55, -190, -2, -36, -36, -39,
	-39, -77, -119, -125, -77, -36, -30, -78, -79, 78,
	-77, -190, -36, -37, -36, -36, -92, 151, -53, 30,
	55, -49, -51, -50, -52, 42, 46, 48, 43, 44,
	45, 49, -129, 22, -41, -189, -128, 151, -127, 22,
	-125, 59, -92, 53, -41, -53, -100, -97, 55, 231,
	233, 234, 52, 71, -39, -148, 107, -166, -167, -168,
	-120, 59, 60, -157, -158, -159, -169, 137, -174, 130,
	132, 129, -160, 138, 124, 28, 56, -153, 68, 74,
	-149, 212, -143, 54, -143, -143, -143, -143, -147, 187,
	-147, -147, -147, 54, 54, -143, -143, -143, -151, 54,
	-151, -151, -152, 54, -152, -123, 53, -53, -180, 259,
	-181, 57, -131, 23, -131, -113, 120, 117, 118, -177,
	116, 209, 187, 66, 29, 15, 249, 151, 262, 57,
	152, -53, -53, -53, -131, -53, -110, 90, 12, -125,
	-125, 38, -39, -39, -126, -86, -89, -103, 19, 11,
	34, 34, -36, 68, 69, 70, 112, -189, -70, -63,
	-63, -63, -35, 146, 73, -190, -190, -36, 55, -39,
	-190, -190, -190, 55, 53, 22, 55, 11, 112, 55,
	11, -190, -36, -81, -79, 80, -39, -190, -190, -190,
	-190, -190, -61, 30, 34, -2, -189, -189, -95, -99,
	-77, -42, -43, -43, -42, -43, 42, 42, 42, 47,
	42, 47, 42, -50, -125, -190, -56, 50, 127, 51,
	-189, -127, -57, 12, -41, -57, -101, -102, 235, 232,
	238, 57, 59, 55, -168, 82, 54, 57, 28, -160,
	-160, -161, 57, -161, 28, -144, 29, 68, -150, 213,
	60, -147, -147, -148, 30, -148, -148, -148, -156, 59,
	-156, 60, 60, 52, -119, -131, -179, -178, -120, -130,
	-183, 157, 131, 137, 138, 133, 57, 124, 28, 130,
	132, 151, 129, -183, 157, -114, -115, 126, 22, 124,
	28, 151, 126, -131, -107, 59, -39, 39, 112, -53,
	-40, 11, 99, -120, -37, -35, 73, -63, -63, -190,
	-38, -135, 108, 184, 145, 182, 178, 198, 189, 211,
	180, 212, -132, -135, -63, -63, -120, -63, -63, 256,
	-84, 81, -39, 79, -94, 52, -95, -72, -74, -73,
	-189, -2, -90, -119, -93, -119, -57, 55, 82, -46,
	-45, 52, 53, -47, 52, -45, 42, 42, 124, 124,
	124, -93, -84, -39, -57, 232, 236, 237, -167, -168,
	-171, -170, -119, -174, -161, -161, 54, -146, 52, 59,
	60, 61, 68, 239, 67, 56, -148, -148, 57, 108,
	56, 55, 56, 55, 56, 55, -53, 55, 82, -130,
	-119, -130, -119, -53, -130, -119, -53, -110, -57, -41,
	-190, -63, -190, -143, -143, -143, -152, -143, 172, -143,
	172, -190, -190, -190, 55, 19, -190, 55, 19, -189,
	-34, 254, -39, 27, -94, 55, -190, -190, -190, 55,
	112, -190, 55, -84, -99, -39, -39, 54, -39, -189,
	-189, -189, -190, -88, 56, 55, -143, -91, -119, -154,
	209, 9, 54, -147, 59, -147, 60, 60, -131, -178,
	-168, 54, 26, -82, 13, -147, 57, -63, -63, -63,
	-63, -63, -190, 59, 28, -74, 34, -2, -189, -119,
	-119, -119, -88, -91, -91, -91, -91, -128, -173, -172,
	53, 134, 66, -170, 56, 55, -155, 130, 28, 129,
	239, 56, -148, -148, 56, 56, -91, -189, -83, 14,
	16, -190, -190, -190, -190, -33, 92, 259, 9, -72,
	-2, 112, 56, -190, -190, -190, -56, -172, 57, -162,
	82, 59, 140, -119, -145, 66, 28, 28, 54, 56,
	-175, -176, 151, -39, -71, -190, 257, 49, 260, -95,
	-190, -119, 60, -53, 59, 56, -182, -190, 55, -119,
	39, 258, 261, 54, -180, -176, 34, 39, -91, 153,
	259, 56, 154, 260, -185, -186, 52, -189, 261, -186,
	52, 10, 9, -63, 150, -184, 141, 136, 139, 30,
	-184, -190, -190, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 544, 0, 311, 311, 311, 311, 311, 311,
	0, 615, 598, 0, 0, 0, 0, -2, 298, 299,
	0, 301, 302, 833, 833, 833, 833, 833, 0, 0,
	833, 0, 35, 36, 831, 1, 3, 552, 0, 0,
	315, 318, 313, 0, 598, 598, 0, 0, 62, 63,
	0, 0, 0, 818, 0, 819, 596, 596, 596, 616,
	617, 620, 621, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 0, 0, 599, 0, 594, 0, 594, 594, 594,
	0, 252, 383, 624, 625, 818, 819, 0, 0, 0,
	0, 834, 834, 834, 834, 0, 834, 0, 271, 272,
	275, 276, 277, 278, 279, 280, 834, 295, 296, 285,
	297, 300, 303, 304, 305, 306, 307, 833, 833, 310,
	29, 556, 0, 0, 544, 31, 0, 311, 316, 317,
	321, 319, 320, 312, 0, 329, 333, 0, 391, 0,
	396, 398, -2, -2, 0, 433, 434, 435, 436, 437,
	0, 0, 0, 0, 0, 0, 0, 0, 461, 462,
	463, 464, 529, 530, 531, 532, 533, 534, 535, 536,
	400, 401, 526, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 517, 0, 491, 491, 491, 491, 491,
	491, 491, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 47, 0, 809, 580, -2, -2, 0, 0,
	622, 623, -2, 730, -2, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 0, 0,
	82, 0, 80, 0, 834, 0, 70, 0, 0, 0,
	0, 0, 834, 243, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 253, 834, 834, 834, 834, 834, 834,
	834, 834, 262, 835, 836, 263, 264, 265, 834, 834,
	267, 0, 288, 286, 287, 282, 283, 0, 0, 281,
	308, 309, 30, 832, 24, 0, 0, 553, 0, 545,
	546, 549, 552, 29, 318, 0, 323, 322, 314, 0,
	330, 0, 0, 0, 334, 0, 336, 337, 0, 394,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 418,
	419, 420, 421, 422, 423, 424, 397, 0, 411, 0,
	0, 0, 453, 454, 455, 456, 457, 458, 459, 0,
	325, 29, 0, 431, 0, 0, 0, 0, 0, 0,
	0, 0, 321, 0, 518, 0, 483, 0, 484, 485,
	486, 487, 488, 489, 490, 0, 325, 0, 0, 45,
	0, 382, 0, 340, 342, 343, 344, -2, 0, 366,
	-2, 0, 0, 0, 41, 42, 0, 48, 809, 50,
	51, 0, 0, 0, 165, 589, 590, 591, 587, 209,
	0, 0, 146, 142, 88, 89, 90, 135, 92, 135,
	135, 135, 135, 162, 162, 162, 162, 118, 119, 120,
	121, 122, 0, 0, 105, 135, 135, 135, 109, 125,
	126, 127, 128, 129, 130, 131, 132, 93, 94, 95,
	96, 97, 98, 99, 137, 137, 137, 139, 139, 618,
	65, 0, 73, 0, 834, 0, 834, 78, 0, 225,
	0, 0, 246, 595, 0, 834, 249, 250, 384, 626,
	627, 254, 255, 256, 257, 258, 259, 260, 261, 266,
	270, 0, 291, 0, 0, 274, 273, 557, 0, 0,
	0, 0, 0, 548, 550, 551, 556, 32, 321, 0,
	537, 0, 0, 0, 324, 27, 392, 393, 395, 412,
	0, 414, 416, 335, 331, 0, 527, -2, 402, 403,
	427, 428, 429, 0, 0, 0, 0, 425, 407, 0,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 452, 502, 503, 0, 450, 451, 460, 0,
	0, 326, 327, 430, 0, 575, 29, 0, 0, 0,
	0, 0, 526, 0, 0, 0, 0, 524, 521, 0,
	0, 492, 0, 0, 0, 0, 0, 0, 381, 0,
	0, 0, 0, 0, 0, 371, 0, 0, 374, 0,
	0, 0, 0, 365, 0, 0, 385, 779, 367, 0,
	369, 370, 389, 0, 389, 44, 581, 49, 0, 0,
	54, 55, 582, 583, 584, 585, 0, 79, 210, 212,
	215, 216, 217, 83, 84, 85, 0, 0, 197, 0,
	0, 191, 191, 0, 189, 190, 81, 149, 147, 0,
	144, 143, 91, 0, 162, 162, 112, 113, 165, 0,
	165, 165, 165, 0, 0, 106, 107, 108, 100, 0,
	101, 102, 103, 0, 104, 0, 0, 834, 67, 0,
	71, 72, 68, 597, 69, 833, 0, 0, 610, 226,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	0, 0, 244, 834, 248, 288, 269, 0, 0, 289,
	290, 0, 554, 555, 0, 547, 25, 0, 592, 593,
	538, 539, 338, 413, 415, 417, 0, 325, 404, 425,
	408, 0, 405, 0, 0, 399, 465, 0, 0, 432,
	-2, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 0, 522, 0, 0, 482, 493, 494,
	495, 496, 569, 0, 0, -2, 0, 0, 389, 577,
	0, 341, 360, 362, 0, 357, 372, 373, 375, 0,
	377, 0, 379, 380, 345, 347, 348, 0, 0, 0,
	0, 368, 544, 0, 389, 40, 52, 53, 0, 0,
	59, 166, 167, 0, 213, 0, 0, 0, 184, 191,
	191, 187, 192, 188, 0, 157, 0, 148, 87, 145,
	0, 165, 165, 114, 0, 115, 116, 117, 0, 133,
	0, 0, 0, 0, 619, 66, 74, 75, 0, 218,
	833, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 833, 0, 0, 833, 611, 612, 613,
	614, 0, 0, 247, 291, 292, 293, 558, 0, 26,
	389, 0, 332, 528, 0, 406, 0, 426, 409, 466,
	328, 0, 135, 135, 507, 135, 139, 510, 135, 512,
	135, 515, 0, 0, 0, 0, 527, 0, 0, 0,
	519, 481, 525, 0, 33, 0, 569, 559, 571, 573,
	0, 29, 0, 565, 0, 352, 544, 0, 0, 354,
	361, 0, 0, 355, 0, 356, 376, 378, 0, 0,
	0, 0, 552, 390, 39, 56, 57, 58, 211, 214,
	0, 193, 135, 196, 185, 186, 0, 160, 0, 150,
	151, 152, 153, 154, 156, 136, 110, 111, 163, 164,
	162, 0, 162, 0, 140, 0, 834, 0, 0, 219,
	0, 220, 222, 223, 224, 0, 245, 268, 540, 339,
	467, 410, 470, 504, 162, 508, 509, 511, 513, 514,
	516, 472, 471, 473, 0, 0, 476, 0, 0, 0,
	0, 0, 523, 0, 34, 0, 574, -2, 0, 0,
	0, 46, 0, 552, 578, 579, 358, 0, 363, 0,
	0, 0, 366, 38, 176, 0, 195, 0, 350, 168,
	161, 0, 0, 165, 134, 165, 0, 0, 64, 76,
	77, 0, 0, 542, 0, 505, 506, 0, 0, 0,
	0, 497, 480, 520, 0, 572, 0, -2, 0, 567,
	566, 353, 37, 0, 0, 0, 0, 385, 175, 177,
	0, 182, 0, 194, 0, 0, 173, 0, 170, 172,
	158, 155, 123, 124, 138, 141, 0, 0, 28, 0,
	0, 474, 475, 477, 478, 0, 0, 0, 0, 562,
	29, 0, 359, 386, 387, 388, 349, 178, 179, 0,
	183, 181, 0, 351, 86, 0, 169, 171, 0, 70,
	0, 239, 0, 543, 541, 479, 0, 0, 0, 570,
	-2, 568, 180, 0, 174, 159, 73, 238, 0, 0,
	498, 0, 501, 0, 221, 240, 0, 499, 0, 0,
	0, 198, 0, 0, 199, 200, 0, 0, 500, 201,
	0, 0, 0, 0, 0, 202, 204, 205, 0, 0,
	203, 241, 242, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 263,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:351
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:359
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:403
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:470
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:474
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:526
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:586
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:591
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:606
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:641
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:648
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:663
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:677
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:896
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:901
		{
			yyVAL.optVal = nil
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:905
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:910
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:922
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:926
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:959
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.optVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1074
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1108
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1119
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1186
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1197
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1201
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1205
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1209
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1215
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1221
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1286
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1296
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1300
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1327
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1360
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1366
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1376
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1380
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1392
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1396
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1404
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1412
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1417
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1507
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1512
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1590
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.str = "full "
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1604
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1610
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.showFilter = nil
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1628
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1632
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = SessionStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.str = GlobalStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &Begin{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.statement = &Begin{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &Commit{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1678
		{
			yyVAL.statement = &Rollback{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &OtherRead{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1688
		{
			yyVAL.statement = &OtherRead{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &OtherRead{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1718
		{
			setAllowComments(yylex, true)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.bytes2 = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = UnionStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = UnionAllStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = UnionDistinctStr
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = SQLCacheStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = DistinctStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = StraightJoinHint
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.selectExprs = nil
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1839
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1843
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1887
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1897
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1920
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1924
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1938
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1940
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1944
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1950
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1955
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1964
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = JoinStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = StraightJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2001
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.str = LeftJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = RightJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = NaturalJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2047
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2052
		{
			yyVAL.indexHints = nil
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2056
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2060
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2064
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2069
		{
			yyVAL.expr = nil
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2091
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2095
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2109
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.str = IsNullStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.str = IsNotNullStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.str = IsTrueStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.str = IsNotTrueStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.str = IsFalseStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2191
		{
			yyVAL.str = IsNotFalseStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.str = EqualStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.str = LessThanStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = GreaterThanStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = LessEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.str = GreaterEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2217
		{
			yyVAL.str = NotEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = nil
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2388
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2554
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2558
		{
			yyVAL.str = BooleanModeStr
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2562
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2566
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2570
		{
			yyVAL.str = QueryExpansionStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = nil
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2650
		{
			yyVAL.str = string("")
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = nil
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2685
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2689
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2693
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = &NullVal{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2751
		{
			yyVAL.exprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = nil
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2769
		{
			yyVAL.orderBy = nil
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2773
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2789
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2794
		{
			yyVAL.str = AscScr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2798
		{
			yyVAL.str = AscScr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.str = DescScr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2807
		{
			yyVAL.limit = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2815
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2819
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2824
		{
			yyVAL.str = ""
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.str = ForUpdateStr
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2832
		{
			yyVAL.str = ShareModeStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2845
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2853
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2858
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2862
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2866
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2885
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2890
		{
			yyVAL.updateExprs = nil
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2894
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2904
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2920
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2940
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2946
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2956
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2962
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2970
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2974
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.bytes = []byte("charset")
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &Default{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3005
		{
			yyVAL.byt = 0
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3007
		{
			yyVAL.byt = 1
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3010
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3012
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3015
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = IgnoreStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3035
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3042
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3046
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3050
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3055
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3057
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3059
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3062
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3072
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3325
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3334
		{
			decNesting(yylex)
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3339
		{
			skipToEnd(yylex)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3344
		{
			skipToEnd(yylex)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3348
		{
			skipToEnd(yylex)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
